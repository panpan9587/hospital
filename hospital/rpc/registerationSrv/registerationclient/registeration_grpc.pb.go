// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/doc/registeration.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Registeration_AppointmentAttendingPhysician_FullMethodName  = "/user.Registeration/AppointmentAttendingPhysician"
	Registeration_CancelAppointmentRegistration_FullMethodName  = "/user.Registeration/CancelAppointmentRegistration"
	Registeration_GetAppointmentRegistrationById_FullMethodName = "/user.Registeration/GetAppointmentRegistrationById"
	Registeration_OfficeList_FullMethodName                     = "/user.Registeration/OfficeList"
	Registeration_OfficeDoctorList_FullMethodName               = "/user.Registeration/OfficeDoctorList"
	Registeration_DoctorDetails_FullMethodName                  = "/user.Registeration/DoctorDetails"
)

// RegisterationClient is the client API for Registeration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterationClient interface {
	// 挂号预约
	AppointmentAttendingPhysician(ctx context.Context, in *AppointmentAttendingPhysicianReq, opts ...grpc.CallOption) (*Empty, error)
	// 取消预约
	CancelAppointmentRegistration(ctx context.Context, in *CancelAppointmentRegistrationReq, opts ...grpc.CallOption) (*Empty, error)
	// 获取预约信息
	GetAppointmentRegistrationById(ctx context.Context, in *GetAppointmentRegistrationByIdReq, opts ...grpc.CallOption) (*GetAppointmentRegistrationByIdRes, error)
	// ------------------------------------------------//todo 医生模块--------------------------------------------------------
	// 科室列表
	OfficeList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OfficeListRes, error)
	// 科室医生列表
	OfficeDoctorList(ctx context.Context, in *OfficeDoctorListReq, opts ...grpc.CallOption) (*OfficeDoctorListRes, error)
	// 医生详情
	DoctorDetails(ctx context.Context, in *DoctorDetailsReq, opts ...grpc.CallOption) (*DoctorDetailsRes, error)
}

type registerationClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterationClient(cc grpc.ClientConnInterface) RegisterationClient {
	return &registerationClient{cc}
}

func (c *registerationClient) AppointmentAttendingPhysician(ctx context.Context, in *AppointmentAttendingPhysicianReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Registeration_AppointmentAttendingPhysician_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerationClient) CancelAppointmentRegistration(ctx context.Context, in *CancelAppointmentRegistrationReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Registeration_CancelAppointmentRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerationClient) GetAppointmentRegistrationById(ctx context.Context, in *GetAppointmentRegistrationByIdReq, opts ...grpc.CallOption) (*GetAppointmentRegistrationByIdRes, error) {
	out := new(GetAppointmentRegistrationByIdRes)
	err := c.cc.Invoke(ctx, Registeration_GetAppointmentRegistrationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerationClient) OfficeList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OfficeListRes, error) {
	out := new(OfficeListRes)
	err := c.cc.Invoke(ctx, Registeration_OfficeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerationClient) OfficeDoctorList(ctx context.Context, in *OfficeDoctorListReq, opts ...grpc.CallOption) (*OfficeDoctorListRes, error) {
	out := new(OfficeDoctorListRes)
	err := c.cc.Invoke(ctx, Registeration_OfficeDoctorList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerationClient) DoctorDetails(ctx context.Context, in *DoctorDetailsReq, opts ...grpc.CallOption) (*DoctorDetailsRes, error) {
	out := new(DoctorDetailsRes)
	err := c.cc.Invoke(ctx, Registeration_DoctorDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterationServer is the server API for Registeration service.
// All implementations must embed UnimplementedRegisterationServer
// for forward compatibility
type RegisterationServer interface {
	// 挂号预约
	AppointmentAttendingPhysician(context.Context, *AppointmentAttendingPhysicianReq) (*Empty, error)
	// 取消预约
	CancelAppointmentRegistration(context.Context, *CancelAppointmentRegistrationReq) (*Empty, error)
	// 获取预约信息
	GetAppointmentRegistrationById(context.Context, *GetAppointmentRegistrationByIdReq) (*GetAppointmentRegistrationByIdRes, error)
	// ------------------------------------------------//todo 医生模块--------------------------------------------------------
	// 科室列表
	OfficeList(context.Context, *Empty) (*OfficeListRes, error)
	// 科室医生列表
	OfficeDoctorList(context.Context, *OfficeDoctorListReq) (*OfficeDoctorListRes, error)
	// 医生详情
	DoctorDetails(context.Context, *DoctorDetailsReq) (*DoctorDetailsRes, error)
	mustEmbedUnimplementedRegisterationServer()
}

// UnimplementedRegisterationServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterationServer struct {
}

func (UnimplementedRegisterationServer) AppointmentAttendingPhysician(context.Context, *AppointmentAttendingPhysicianReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppointmentAttendingPhysician not implemented")
}
func (UnimplementedRegisterationServer) CancelAppointmentRegistration(context.Context, *CancelAppointmentRegistrationReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAppointmentRegistration not implemented")
}
func (UnimplementedRegisterationServer) GetAppointmentRegistrationById(context.Context, *GetAppointmentRegistrationByIdReq) (*GetAppointmentRegistrationByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentRegistrationById not implemented")
}
func (UnimplementedRegisterationServer) OfficeList(context.Context, *Empty) (*OfficeListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficeList not implemented")
}
func (UnimplementedRegisterationServer) OfficeDoctorList(context.Context, *OfficeDoctorListReq) (*OfficeDoctorListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficeDoctorList not implemented")
}
func (UnimplementedRegisterationServer) DoctorDetails(context.Context, *DoctorDetailsReq) (*DoctorDetailsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorDetails not implemented")
}
func (UnimplementedRegisterationServer) mustEmbedUnimplementedRegisterationServer() {}

// UnsafeRegisterationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterationServer will
// result in compilation errors.
type UnsafeRegisterationServer interface {
	mustEmbedUnimplementedRegisterationServer()
}

func RegisterRegisterationServer(s grpc.ServiceRegistrar, srv RegisterationServer) {
	s.RegisterService(&Registeration_ServiceDesc, srv)
}

func _Registeration_AppointmentAttendingPhysician_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentAttendingPhysicianReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterationServer).AppointmentAttendingPhysician(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registeration_AppointmentAttendingPhysician_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterationServer).AppointmentAttendingPhysician(ctx, req.(*AppointmentAttendingPhysicianReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registeration_CancelAppointmentRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAppointmentRegistrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterationServer).CancelAppointmentRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registeration_CancelAppointmentRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterationServer).CancelAppointmentRegistration(ctx, req.(*CancelAppointmentRegistrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registeration_GetAppointmentRegistrationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentRegistrationByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterationServer).GetAppointmentRegistrationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registeration_GetAppointmentRegistrationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterationServer).GetAppointmentRegistrationById(ctx, req.(*GetAppointmentRegistrationByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registeration_OfficeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterationServer).OfficeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registeration_OfficeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterationServer).OfficeList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registeration_OfficeDoctorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficeDoctorListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterationServer).OfficeDoctorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registeration_OfficeDoctorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterationServer).OfficeDoctorList(ctx, req.(*OfficeDoctorListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registeration_DoctorDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterationServer).DoctorDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registeration_DoctorDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterationServer).DoctorDetails(ctx, req.(*DoctorDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Registeration_ServiceDesc is the grpc.ServiceDesc for Registeration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registeration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Registeration",
	HandlerType: (*RegisterationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppointmentAttendingPhysician",
			Handler:    _Registeration_AppointmentAttendingPhysician_Handler,
		},
		{
			MethodName: "CancelAppointmentRegistration",
			Handler:    _Registeration_CancelAppointmentRegistration_Handler,
		},
		{
			MethodName: "GetAppointmentRegistrationById",
			Handler:    _Registeration_GetAppointmentRegistrationById_Handler,
		},
		{
			MethodName: "OfficeList",
			Handler:    _Registeration_OfficeList_Handler,
		},
		{
			MethodName: "OfficeDoctorList",
			Handler:    _Registeration_OfficeDoctorList_Handler,
		},
		{
			MethodName: "DoctorDetails",
			Handler:    _Registeration_DoctorDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/doc/registeration.proto",
}
