// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/doc/registeration.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Registeration_AddRegisteration_FullMethodName               = "/user.Registeration/AddRegisteration"
	Registeration_CancelAppointmentRegistration_FullMethodName  = "/user.Registeration/CancelAppointmentRegistration"
	Registeration_GetAppointmentRegistrationById_FullMethodName = "/user.Registeration/GetAppointmentRegistrationById"
	Registeration_UpdateAppointmentRegistration_FullMethodName  = "/user.Registeration/UpdateAppointmentRegistration"
)

// RegisterationClient is the client API for Registeration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterationClient interface {
	// 预约
	AddRegisteration(ctx context.Context, in *AddAppointmentRegisterReq, opts ...grpc.CallOption) (*Empty, error)
	// 取消预约
	CancelAppointmentRegistration(ctx context.Context, in *CancelAppointmentRegistrationReq, opts ...grpc.CallOption) (*Empty, error)
	// 获取预约信息
	GetAppointmentRegistrationById(ctx context.Context, in *GetAppointmentRegistrationByIdReq, opts ...grpc.CallOption) (*GetAppointmentRegistrationByIdRes, error)
	// 修改预约信息
	UpdateAppointmentRegistration(ctx context.Context, in *UpdateAppointmentRegistrationReq, opts ...grpc.CallOption) (*Empty, error)
}

type registerationClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterationClient(cc grpc.ClientConnInterface) RegisterationClient {
	return &registerationClient{cc}
}

func (c *registerationClient) AddRegisteration(ctx context.Context, in *AddAppointmentRegisterReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Registeration_AddRegisteration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerationClient) CancelAppointmentRegistration(ctx context.Context, in *CancelAppointmentRegistrationReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Registeration_CancelAppointmentRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerationClient) GetAppointmentRegistrationById(ctx context.Context, in *GetAppointmentRegistrationByIdReq, opts ...grpc.CallOption) (*GetAppointmentRegistrationByIdRes, error) {
	out := new(GetAppointmentRegistrationByIdRes)
	err := c.cc.Invoke(ctx, Registeration_GetAppointmentRegistrationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerationClient) UpdateAppointmentRegistration(ctx context.Context, in *UpdateAppointmentRegistrationReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Registeration_UpdateAppointmentRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterationServer is the server API for Registeration service.
// All implementations must embed UnimplementedRegisterationServer
// for forward compatibility
type RegisterationServer interface {
	// 预约
	AddRegisteration(context.Context, *AddAppointmentRegisterReq) (*Empty, error)
	// 取消预约
	CancelAppointmentRegistration(context.Context, *CancelAppointmentRegistrationReq) (*Empty, error)
	// 获取预约信息
	GetAppointmentRegistrationById(context.Context, *GetAppointmentRegistrationByIdReq) (*GetAppointmentRegistrationByIdRes, error)
	// 修改预约信息
	UpdateAppointmentRegistration(context.Context, *UpdateAppointmentRegistrationReq) (*Empty, error)
	mustEmbedUnimplementedRegisterationServer()
}

// UnimplementedRegisterationServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterationServer struct {
}

func (UnimplementedRegisterationServer) AddRegisteration(context.Context, *AddAppointmentRegisterReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRegisteration not implemented")
}
func (UnimplementedRegisterationServer) CancelAppointmentRegistration(context.Context, *CancelAppointmentRegistrationReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAppointmentRegistration not implemented")
}
func (UnimplementedRegisterationServer) GetAppointmentRegistrationById(context.Context, *GetAppointmentRegistrationByIdReq) (*GetAppointmentRegistrationByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentRegistrationById not implemented")
}
func (UnimplementedRegisterationServer) UpdateAppointmentRegistration(context.Context, *UpdateAppointmentRegistrationReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentRegistration not implemented")
}
func (UnimplementedRegisterationServer) mustEmbedUnimplementedRegisterationServer() {}

// UnsafeRegisterationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterationServer will
// result in compilation errors.
type UnsafeRegisterationServer interface {
	mustEmbedUnimplementedRegisterationServer()
}

func RegisterRegisterationServer(s grpc.ServiceRegistrar, srv RegisterationServer) {
	s.RegisterService(&Registeration_ServiceDesc, srv)
}

func _Registeration_AddRegisteration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppointmentRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterationServer).AddRegisteration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registeration_AddRegisteration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterationServer).AddRegisteration(ctx, req.(*AddAppointmentRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registeration_CancelAppointmentRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAppointmentRegistrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterationServer).CancelAppointmentRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registeration_CancelAppointmentRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterationServer).CancelAppointmentRegistration(ctx, req.(*CancelAppointmentRegistrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registeration_GetAppointmentRegistrationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentRegistrationByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterationServer).GetAppointmentRegistrationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registeration_GetAppointmentRegistrationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterationServer).GetAppointmentRegistrationById(ctx, req.(*GetAppointmentRegistrationByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registeration_UpdateAppointmentRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentRegistrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterationServer).UpdateAppointmentRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registeration_UpdateAppointmentRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterationServer).UpdateAppointmentRegistration(ctx, req.(*UpdateAppointmentRegistrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Registeration_ServiceDesc is the grpc.ServiceDesc for Registeration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registeration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Registeration",
	HandlerType: (*RegisterationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRegisteration",
			Handler:    _Registeration_AddRegisteration_Handler,
		},
		{
			MethodName: "CancelAppointmentRegistration",
			Handler:    _Registeration_CancelAppointmentRegistration_Handler,
		},
		{
			MethodName: "GetAppointmentRegistrationById",
			Handler:    _Registeration_GetAppointmentRegistrationById_Handler,
		},
		{
			MethodName: "UpdateAppointmentRegistration",
			Handler:    _Registeration_UpdateAppointmentRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/doc/registeration.proto",
}
