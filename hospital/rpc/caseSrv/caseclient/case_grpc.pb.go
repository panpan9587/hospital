// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/doc/case.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Case_CaseRecordList_FullMethodName   = "/case.Case/CaseRecordList"
	Case_SearchCaseRecord_FullMethodName = "/case.Case/SearchCaseRecord"
)

// CaseClient is the client API for Case service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaseClient interface {
	CaseRecordList(ctx context.Context, in *CaseRecordListReq, opts ...grpc.CallOption) (*CaseRecordListRes, error)
	SearchCaseRecord(ctx context.Context, in *SearchCaseRecordReq, opts ...grpc.CallOption) (*SearchCaseRecordRes, error)
}

type caseClient struct {
	cc grpc.ClientConnInterface
}

func NewCaseClient(cc grpc.ClientConnInterface) CaseClient {
	return &caseClient{cc}
}

func (c *caseClient) CaseRecordList(ctx context.Context, in *CaseRecordListReq, opts ...grpc.CallOption) (*CaseRecordListRes, error) {
	out := new(CaseRecordListRes)
	err := c.cc.Invoke(ctx, Case_CaseRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseClient) SearchCaseRecord(ctx context.Context, in *SearchCaseRecordReq, opts ...grpc.CallOption) (*SearchCaseRecordRes, error) {
	out := new(SearchCaseRecordRes)
	err := c.cc.Invoke(ctx, Case_SearchCaseRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaseServer is the server API for Case service.
// All implementations must embed UnimplementedCaseServer
// for forward compatibility
type CaseServer interface {
	CaseRecordList(context.Context, *CaseRecordListReq) (*CaseRecordListRes, error)
	SearchCaseRecord(context.Context, *SearchCaseRecordReq) (*SearchCaseRecordRes, error)
	mustEmbedUnimplementedCaseServer()
}

// UnimplementedCaseServer must be embedded to have forward compatible implementations.
type UnimplementedCaseServer struct {
}

func (UnimplementedCaseServer) CaseRecordList(context.Context, *CaseRecordListReq) (*CaseRecordListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaseRecordList not implemented")
}
func (UnimplementedCaseServer) SearchCaseRecord(context.Context, *SearchCaseRecordReq) (*SearchCaseRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCaseRecord not implemented")
}
func (UnimplementedCaseServer) mustEmbedUnimplementedCaseServer() {}

// UnsafeCaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaseServer will
// result in compilation errors.
type UnsafeCaseServer interface {
	mustEmbedUnimplementedCaseServer()
}

func RegisterCaseServer(s grpc.ServiceRegistrar, srv CaseServer) {
	s.RegisterService(&Case_ServiceDesc, srv)
}

func _Case_CaseRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaseRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServer).CaseRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Case_CaseRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServer).CaseRecordList(ctx, req.(*CaseRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Case_SearchCaseRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCaseRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServer).SearchCaseRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Case_SearchCaseRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServer).SearchCaseRecord(ctx, req.(*SearchCaseRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Case_ServiceDesc is the grpc.ServiceDesc for Case service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Case_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "case.Case",
	HandlerType: (*CaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CaseRecordList",
			Handler:    _Case_CaseRecordList_Handler,
		},
		{
			MethodName: "SearchCaseRecord",
			Handler:    _Case_SearchCaseRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/doc/case.proto",
}
