// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/doc/health.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HealthService_GetAppointment_FullMethodName  = "/user.HealthService/GetAppointment"
	HealthService_GetHealth_FullMethodName       = "/user.HealthService/GetHealth"
	HealthService_GetHealthId_FullMethodName     = "/user.HealthService/GetHealthId"
	HealthService_HealthProjectId_FullMethodName = "/user.HealthService/HealthProjectId"
	HealthService_GetDoctorOffice_FullMethodName = "/user.HealthService/GetDoctorOffice"
	HealthService_GetPackage_FullMethodName      = "/user.HealthService/GetPackage"
)

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthServiceClient interface {
	// 预约纪录
	GetAppointment(ctx context.Context, in *GetAppointmentReq, opts ...grpc.CallOption) (*GetAppointmentResp, error)
	// 体检纪录/体检项目记录
	GetHealth(ctx context.Context, in *GetHealthReq, opts ...grpc.CallOption) (*GetHealthResp, error)
	// 根据user_id查询体检详情列表
	GetHealthId(ctx context.Context, in *GetHealthIdReq, opts ...grpc.CallOption) (*GetHealthIdResp, error)
	// 根据user_id查询体检项目详情
	HealthProjectId(ctx context.Context, in *HealthProjectIdReq, opts ...grpc.CallOption) (*HealthProjectIdResp, error)
	// 获取科室详情
	GetDoctorOffice(ctx context.Context, in *GetDoctorOfficeReq, opts ...grpc.CallOption) (*GetDoctorOfficeResp, error)
	// 获取套餐信息
	GetPackage(ctx context.Context, in *GetPackageReq, opts ...grpc.CallOption) (*GetPackageResp, error)
}

type healthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceClient(cc grpc.ClientConnInterface) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) GetAppointment(ctx context.Context, in *GetAppointmentReq, opts ...grpc.CallOption) (*GetAppointmentResp, error) {
	out := new(GetAppointmentResp)
	err := c.cc.Invoke(ctx, HealthService_GetAppointment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) GetHealth(ctx context.Context, in *GetHealthReq, opts ...grpc.CallOption) (*GetHealthResp, error) {
	out := new(GetHealthResp)
	err := c.cc.Invoke(ctx, HealthService_GetHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) GetHealthId(ctx context.Context, in *GetHealthIdReq, opts ...grpc.CallOption) (*GetHealthIdResp, error) {
	out := new(GetHealthIdResp)
	err := c.cc.Invoke(ctx, HealthService_GetHealthId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) HealthProjectId(ctx context.Context, in *HealthProjectIdReq, opts ...grpc.CallOption) (*HealthProjectIdResp, error) {
	out := new(HealthProjectIdResp)
	err := c.cc.Invoke(ctx, HealthService_HealthProjectId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) GetDoctorOffice(ctx context.Context, in *GetDoctorOfficeReq, opts ...grpc.CallOption) (*GetDoctorOfficeResp, error) {
	out := new(GetDoctorOfficeResp)
	err := c.cc.Invoke(ctx, HealthService_GetDoctorOffice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) GetPackage(ctx context.Context, in *GetPackageReq, opts ...grpc.CallOption) (*GetPackageResp, error) {
	out := new(GetPackageResp)
	err := c.cc.Invoke(ctx, HealthService_GetPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
// All implementations must embed UnimplementedHealthServiceServer
// for forward compatibility
type HealthServiceServer interface {
	// 预约纪录
	GetAppointment(context.Context, *GetAppointmentReq) (*GetAppointmentResp, error)
	// 体检纪录/体检项目记录
	GetHealth(context.Context, *GetHealthReq) (*GetHealthResp, error)
	// 根据user_id查询体检详情列表
	GetHealthId(context.Context, *GetHealthIdReq) (*GetHealthIdResp, error)
	// 根据user_id查询体检项目详情
	HealthProjectId(context.Context, *HealthProjectIdReq) (*HealthProjectIdResp, error)
	// 获取科室详情
	GetDoctorOffice(context.Context, *GetDoctorOfficeReq) (*GetDoctorOfficeResp, error)
	// 获取套餐信息
	GetPackage(context.Context, *GetPackageReq) (*GetPackageResp, error)
	mustEmbedUnimplementedHealthServiceServer()
}

// UnimplementedHealthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServiceServer struct {
}

func (UnimplementedHealthServiceServer) GetAppointment(context.Context, *GetAppointmentReq) (*GetAppointmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointment not implemented")
}
func (UnimplementedHealthServiceServer) GetHealth(context.Context, *GetHealthReq) (*GetHealthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedHealthServiceServer) GetHealthId(context.Context, *GetHealthIdReq) (*GetHealthIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthId not implemented")
}
func (UnimplementedHealthServiceServer) HealthProjectId(context.Context, *HealthProjectIdReq) (*HealthProjectIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthProjectId not implemented")
}
func (UnimplementedHealthServiceServer) GetDoctorOffice(context.Context, *GetDoctorOfficeReq) (*GetDoctorOfficeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorOffice not implemented")
}
func (UnimplementedHealthServiceServer) GetPackage(context.Context, *GetPackageReq) (*GetPackageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
}
func (UnimplementedHealthServiceServer) mustEmbedUnimplementedHealthServiceServer() {}

// UnsafeHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServiceServer will
// result in compilation errors.
type UnsafeHealthServiceServer interface {
	mustEmbedUnimplementedHealthServiceServer()
}

func RegisterHealthServiceServer(s grpc.ServiceRegistrar, srv HealthServiceServer) {
	s.RegisterService(&HealthService_ServiceDesc, srv)
}

func _HealthService_GetAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).GetAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_GetAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).GetAppointment(ctx, req.(*GetAppointmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).GetHealth(ctx, req.(*GetHealthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_GetHealthId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).GetHealthId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_GetHealthId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).GetHealthId(ctx, req.(*GetHealthIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_HealthProjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthProjectIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).HealthProjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_HealthProjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).HealthProjectId(ctx, req.(*HealthProjectIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_GetDoctorOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorOfficeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).GetDoctorOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_GetDoctorOffice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).GetDoctorOffice(ctx, req.(*GetDoctorOfficeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_GetPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).GetPackage(ctx, req.(*GetPackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthService_ServiceDesc is the grpc.ServiceDesc for HealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppointment",
			Handler:    _HealthService_GetAppointment_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _HealthService_GetHealth_Handler,
		},
		{
			MethodName: "GetHealthId",
			Handler:    _HealthService_GetHealthId_Handler,
		},
		{
			MethodName: "HealthProjectId",
			Handler:    _HealthService_HealthProjectId_Handler,
		},
		{
			MethodName: "GetDoctorOffice",
			Handler:    _HealthService_GetDoctorOffice_Handler,
		},
		{
			MethodName: "GetPackage",
			Handler:    _HealthService_GetPackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/doc/health.proto",
}
