// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/doc/health.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HealthService_AddBodyInspect_FullMethodName  = "/user.HealthService/AddBodyInspect"
	HealthService_GetMedicalItems_FullMethodName = "/user.HealthService/GetMedicalItems"
	HealthService_GetBodyInspect_FullMethodName  = "/user.HealthService/GetBodyInspect"
	HealthService_GetSignIn_FullMethodName       = "/user.HealthService/GetSignIn"
)

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthServiceClient interface {
	// 添加体检信息
	AddBodyInspect(ctx context.Context, in *BodyInspectRequest, opts ...grpc.CallOption) (*BodyInspectResponse, error)
	// 根据id查询体检项目的详情
	GetMedicalItems(ctx context.Context, in *MedicalItemsRequest, opts ...grpc.CallOption) (*MedicalItemsResponse, error)
	// 预约体检信息详情
	GetBodyInspect(ctx context.Context, in *GetBodyInspectRequest, opts ...grpc.CallOption) (*GetBodyInspectResponse, error)
	// 签到记录
	GetSignIn(ctx context.Context, in *GetSignInRequest, opts ...grpc.CallOption) (*GetSignInResponse, error)
}

type healthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceClient(cc grpc.ClientConnInterface) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) AddBodyInspect(ctx context.Context, in *BodyInspectRequest, opts ...grpc.CallOption) (*BodyInspectResponse, error) {
	out := new(BodyInspectResponse)
	err := c.cc.Invoke(ctx, HealthService_AddBodyInspect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) GetMedicalItems(ctx context.Context, in *MedicalItemsRequest, opts ...grpc.CallOption) (*MedicalItemsResponse, error) {
	out := new(MedicalItemsResponse)
	err := c.cc.Invoke(ctx, HealthService_GetMedicalItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) GetBodyInspect(ctx context.Context, in *GetBodyInspectRequest, opts ...grpc.CallOption) (*GetBodyInspectResponse, error) {
	out := new(GetBodyInspectResponse)
	err := c.cc.Invoke(ctx, HealthService_GetBodyInspect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) GetSignIn(ctx context.Context, in *GetSignInRequest, opts ...grpc.CallOption) (*GetSignInResponse, error) {
	out := new(GetSignInResponse)
	err := c.cc.Invoke(ctx, HealthService_GetSignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
// All implementations must embed UnimplementedHealthServiceServer
// for forward compatibility
type HealthServiceServer interface {
	// 添加体检信息
	AddBodyInspect(context.Context, *BodyInspectRequest) (*BodyInspectResponse, error)
	// 根据id查询体检项目的详情
	GetMedicalItems(context.Context, *MedicalItemsRequest) (*MedicalItemsResponse, error)
	// 预约体检信息详情
	GetBodyInspect(context.Context, *GetBodyInspectRequest) (*GetBodyInspectResponse, error)
	// 签到记录
	GetSignIn(context.Context, *GetSignInRequest) (*GetSignInResponse, error)
	mustEmbedUnimplementedHealthServiceServer()
}

// UnimplementedHealthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServiceServer struct {
}

func (UnimplementedHealthServiceServer) AddBodyInspect(context.Context, *BodyInspectRequest) (*BodyInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBodyInspect not implemented")
}
func (UnimplementedHealthServiceServer) GetMedicalItems(context.Context, *MedicalItemsRequest) (*MedicalItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicalItems not implemented")
}
func (UnimplementedHealthServiceServer) GetBodyInspect(context.Context, *GetBodyInspectRequest) (*GetBodyInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBodyInspect not implemented")
}
func (UnimplementedHealthServiceServer) GetSignIn(context.Context, *GetSignInRequest) (*GetSignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignIn not implemented")
}
func (UnimplementedHealthServiceServer) mustEmbedUnimplementedHealthServiceServer() {}

// UnsafeHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServiceServer will
// result in compilation errors.
type UnsafeHealthServiceServer interface {
	mustEmbedUnimplementedHealthServiceServer()
}

func RegisterHealthServiceServer(s grpc.ServiceRegistrar, srv HealthServiceServer) {
	s.RegisterService(&HealthService_ServiceDesc, srv)
}

func _HealthService_AddBodyInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).AddBodyInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_AddBodyInspect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).AddBodyInspect(ctx, req.(*BodyInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_GetMedicalItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).GetMedicalItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_GetMedicalItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).GetMedicalItems(ctx, req.(*MedicalItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_GetBodyInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBodyInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).GetBodyInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_GetBodyInspect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).GetBodyInspect(ctx, req.(*GetBodyInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_GetSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).GetSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_GetSignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).GetSignIn(ctx, req.(*GetSignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthService_ServiceDesc is the grpc.ServiceDesc for HealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBodyInspect",
			Handler:    _HealthService_AddBodyInspect_Handler,
		},
		{
			MethodName: "GetMedicalItems",
			Handler:    _HealthService_GetMedicalItems_Handler,
		},
		{
			MethodName: "GetBodyInspect",
			Handler:    _HealthService_GetBodyInspect_Handler,
		},
		{
			MethodName: "GetSignIn",
			Handler:    _HealthService_GetSignIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/doc/health.proto",
}
