// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/doc/diagnosis.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Diagnosis_Register_FullMethodName = "/diagnosis.Diagnosis/Register"
)

// DiagnosisClient is the client API for Diagnosis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiagnosisClient interface {
	Register(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type diagnosisClient struct {
	cc grpc.ClientConnInterface
}

func NewDiagnosisClient(cc grpc.ClientConnInterface) DiagnosisClient {
	return &diagnosisClient{cc}
}

func (c *diagnosisClient) Register(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Diagnosis_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiagnosisServer is the server API for Diagnosis service.
// All implementations must embed UnimplementedDiagnosisServer
// for forward compatibility
type DiagnosisServer interface {
	Register(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedDiagnosisServer()
}

// UnimplementedDiagnosisServer must be embedded to have forward compatible implementations.
type UnimplementedDiagnosisServer struct {
}

func (UnimplementedDiagnosisServer) Register(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedDiagnosisServer) mustEmbedUnimplementedDiagnosisServer() {}

// UnsafeDiagnosisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiagnosisServer will
// result in compilation errors.
type UnsafeDiagnosisServer interface {
	mustEmbedUnimplementedDiagnosisServer()
}

func RegisterDiagnosisServer(s grpc.ServiceRegistrar, srv DiagnosisServer) {
	s.RegisterService(&Diagnosis_ServiceDesc, srv)
}

func _Diagnosis_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Diagnosis_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServer).Register(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Diagnosis_ServiceDesc is the grpc.ServiceDesc for Diagnosis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Diagnosis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diagnosis.Diagnosis",
	HandlerType: (*DiagnosisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Diagnosis_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/doc/diagnosis.proto",
}
